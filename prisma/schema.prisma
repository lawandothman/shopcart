// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime
  image         String?
  isAdmin       Boolean   @default(false)
  accounts      Account[]
  sessions      Session[]
  products      Product[]
  Review        Review[]
  Order         Order[]
}

model VerificationToken {
  identifier String   @id @default(auto()) @map("_id") @db.ObjectId
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  productId String   @db.ObjectId
  name      String
  rating    Int
  comment   String?
  createdAt DateTime
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Product {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  image        String
  brand        String
  category     String
  description  String
  rating       Float       @default(0.0)
  numReviews   Int         @default(0)
  price        Float       @default(0.0)
  countInStock Int         @default(0)
  createdAt    DateTime?
  updatedAt    DateTime    @updatedAt
  userId       String?     @db.ObjectId
  user         User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  reviews      Review[]
  OrderItem    OrderItem[]
}

model Order {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  userId         String          @db.ObjectId
  shippinAddress ShippingAddress
  paymentMethod  String
  paymentResult  PaymentResult
  taxPrice       Float           @default(0.0)
  shippingPrice  Float           @default(0.0)
  totalPrice     Float           @default(0.0)
  isPaid         Boolean         @default(false)
  paidAt         DateTime?
  isDispatched   Boolean         @default(false)
  dispatchedAt   DateTime?
  createdAt      DateTime
  updatedAt      DateTime        @updatedAt
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderItems     OrderItem[]
}

model OrderItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  quantity  Int
  price     Int
  productId String  @db.ObjectId
  orderId   String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])
  Order     Order   @relation(fields: [orderId], references: [id])
}

type ShippingAddress {
  address  String
  city     String
  postCode String
  country  String
}

type PaymentResult {
  id           String
  status       String
  updateTime   String
  emailAddress String
}
